package evolution

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assets_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x59\x4f\x6f\xdb\x36\x14\xbf\xf7\x53\xb0\x0a\xb0\x6e\xc0\x24\x39\x4e\x8b\x16\xae\x6d\x60\xd8\x86\xed\x30\x0c\x18\xda\xc3\x76\x2a\x28\x91\x92\xe8\x50\xa4\x46\x52\x49\xbc\x61\xdf\x7d\x8f\x14\x65\x51\xb2\x5d\xdb\x49\x86\x6d\xee\x21\x22\xf5\xf8\x7e\xef\x1f\xdf\x1f\x75\x59\x99\x9a\xaf\x5f\x2c\x2b\x8a\xc9\xfa\x05\x82\xdf\xf2\x65\x1c\xa3\xef\xb0\xc1\x1f\x71\xc6\xa9\x46\xdf\x7e\xf8\x80\xe2\xd8\xbf\xe3\x4c\xdc\x22\x45\xf9\x2a\xd2\x66\x0b\x6f\x2b\x4a\x4d\x84\xcc\xb6\xa1\xab\xc8\xd0\x07\x93\xe6\x5a\x47\xa8\x52\xb4\x58\x45\x69\x2a\xa8\x21\x02\x27\x99\x94\x46\x1b\x85\x9b\x9c\x88\x24\x97\x75\xba\xdb\x48\x6f\x92\x59\x72\x63\x0f\x0d\x7b\x49\xcd\x80\x0a\xd8\x3c\x0a\xd2\x42\x10\x10\xde\x38\xe1\x13\x90\x20\x6d\x78\x5b\xc6\x4c\xe8\xb4\x98\xe7\x6f\xdf\x64\x6f\xe7\xaf\xdf\x66\x29\x13\x86\x96\x0a\x1b\x26\x45\x28\x4e\x4a\x76\x8a\x0f\x62\x9f\x96\xa6\x43\xaf\x8c\x69\xf4\x22\x4d\x4b\x66\xac\x18\xf0\xa7\x6a\xb3\x84\xc9\x01\x20\x36\xb2\x2c\x39\x4d\xe7\xc9\x3c\x99\x8d\xd5\xf6\xaf\xce\xd3\x7e\x8c\x57\xe3\x07\x8b\xb7\x67\xe6\x42\x0a\x13\xe3\x7b\xaa\x65\x4d\xd3\xd7\x3b\xc8\x70\x7b\x0a\xe7\x40\xba\xe7\x44\xe0\xbb\x0c\x2b\xf4\xa7\x5b\xd9\x5f\x8d\x55\xc9\x44\x9c\x49\x63\x64\xbd\x40\x33\xf4\x92\xd5\x8d\x54\x06\x0b\xe3\x68\xfe\x0a\xcf\xc5\xf0\xc7\x93\x06\x2c\x0a\x2e\xb1\x59\x08\x29\xe8\xfb\x09\x5b\xcb\x0f\xb7\x46\x0e\xfb\x84\xe9\x86\xe3\xed\x02\x39\x5f\x0e\xfb\x6e\x19\xc3\x1b\xd9\x9a\x05\x2a\xd8\x03\x25\xef\x03\xfc\xab\x5c\x51\x6c\x5a\x45\xf5\xd7\xdd\x5a\x53\x63\x98\x28\xfb\x25\x13\x85\x54\xb5\xf3\x7c\x20\x58\x86\xf3\xdb\x52\xc9\x56\x90\x38\x97\x5c\xaa\x05\xba\xba\x71\xbf\x01\xb7\xdf\x7f\x73\x6d\xff\x8d\x20\x7b\x88\x80\xe1\x3d\x23\xa6\x5a\xa0\xf9\x6c\xd6\x3c\x84\xb4\x89\xa7\x05\x05\x32\xca\xf7\x0f\x5c\xdb\x03\x81\x65\x47\x67\x7b\xd5\x62\x96\x1f\x91\x7e\x81\x5a\xc5\xbf\xd4\x8d\x62\x86\xea\x94\xd0\x02\xb7\x1c\xae\x88\x3f\xb7\x7b\x48\x1a\x51\x7e\x85\x72\x0a\xb7\x40\x21\x4e\x0b\x83\x84\x8c\x15\x6d\xe0\xed\x67\x00\x75\x83\x21\xcc\x30\x29\xe9\x7e\x54\x58\x26\xa0\xee\x7c\xac\xed\x32\x0d\x22\xca\x65\x96\xcd\x2f\x2d\x55\xdb\x21\xa3\xe8\x5c\xb1\xc6\x84\xf7\x79\x83\xef\x70\xb7\x1b\xa1\xbc\xc2\x0a\x0c\xb6\x8a\x5a\x53\xbc\x8b\x90\x56\xb9\xbb\xe4\x92\xd0\x64\xf3\xbb\x65\xe4\x02\xbd\x7b\x8c\xaf\x93\xeb\x19\x44\xb9\x0d\xe9\x0d\x44\x34\x60\x3b\x2e\x87\xd3\xda\xd3\x04\xd8\xcf\x32\x0e\xfc\x4d\xba\xd1\x5e\x9a\x24\xc8\x24\x07\xa4\x79\x26\xd4\xa7\xe7\xb6\x67\x92\xed\x58\x0e\x0a\x53\xfd\x4d\x32\xb7\xf6\x19\x67\xfa\xe3\xf8\x8e\xf3\xa5\x39\x75\x73\x24\xa5\x8e\x61\x9e\xe4\x83\x8d\x4e\x72\x2e\x5b\x52\x70\x0c\x17\xc9\x2a\x89\x37\xf8\x21\xe5\x2c\xd3\x69\x53\x61\x4d\x95\x93\x65\xee\x17\xa7\x34\xf4\x12\x9f\x41\xd6\x40\x1d\x90\x98\x9c\x41\x49\xef\x64\x26\x1f\xce\x20\xe4\xb8\x15\x79\x35\x21\x5c\xa6\x5d\x37\xb0\xcc\x24\xd9\xfa\x73\x90\xcd\x51\xce\xb1\xd6\xab\xc8\xd7\x05\x9f\xe6\x99\xb8\xa3\x60\x27\x5f\x40\x1c\x2d\x61\x3b\x5a\xc8\x1a\x06\x33\x41\x55\x5c\xf0\x96\x91\x80\x6a\x4a\xe9\xd9\x59\x64\xaa\x26\x74\x8e\x36\x6b\xa1\x96\x08\xef\xad\x6e\x11\x4d\x0e\x77\xfe\xb6\x89\x9a\xe3\x46\x53\x12\x21\x1b\xf2\x7e\xdb\x0a\xd3\xed\xf7\xdb\x90\xb8\xac\x7f\xaf\x32\x1d\xd3\x07\x5c\x37\x50\x55\x3c\xa3\x9e\x32\xbe\x3e\x20\x49\x67\x47\x48\x85\x3d\xba\x56\xb1\x14\x7c\x1b\xad\x3f\x76\xf8\xc0\x84\x95\xee\xfa\x81\x4d\x81\xee\x80\x32\x69\xa7\xc0\x81\x37\x78\xa2\x53\xa6\xb0\x20\x7d\xc5\xbf\x8a\xd6\xdf\x3b\xd7\x2e\x53\x3c\x31\x65\x0a\xb6\x3c\x6e\xdd\x5e\x21\x34\x51\x30\x42\x8c\x80\x35\x2f\x33\xc0\xb2\xe5\x81\x90\x68\xa8\xf7\xc7\x8c\xc5\x59\x4f\x4f\x94\x6c\x88\xbc\x17\xa8\xa6\x25\x8e\xfb\xd5\x91\x73\xde\x1e\xbd\xea\x53\x1e\x3b\x77\x87\x35\x2a\x42\x4a\xf2\x20\x40\xb0\x62\x18\x94\x03\x2f\x10\x0a\x9a\x16\x98\xdb\x58\x1d\xb9\xcf\x85\xbe\x75\x53\xb7\x6b\x0d\xb2\x63\x99\x43\x4d\x35\x3b\x64\x57\xfa\xa2\xf5\xac\xa7\x9f\x3a\x61\xcf\xfa\x96\x57\xd0\x6f\xec\xab\x50\x53\xd1\x8e\x6d\xe1\xb6\x7a\x2d\xdc\xf3\x71\x0c\x87\xe3\xaa\xc1\x48\x6a\x3d\xe0\x74\x2d\x14\xac\x29\xe7\x20\x73\x0e\x8d\xc7\x2a\x9a\x45\x5d\xb3\xb1\x8a\xde\xd9\x66\xe3\x04\x40\x07\x32\xcc\x07\xa7\x69\xd5\x79\x84\x9e\xf1\xfa\x67\x5c\xd3\x65\x0a\x0f\x17\x9d\xfa\x81\x82\x47\xd5\xe5\xe7\xbe\x29\x1f\x01\xf6\x23\xc5\xdc\x54\x97\x9f\xfb\x89\x65\x8c\xc8\x47\xe0\xb5\xa2\x7c\x8c\x72\xbf\x5e\x7e\xe4\xb7\xf3\x8f\x00\xe5\x19\xae\xb5\xfc\x4e\x06\x0b\x10\xd9\xb0\xfd\xfc\xf5\x39\x92\x4d\xa0\xd2\x1e\xca\xa8\x2d\xbf\x20\x53\xf5\x8f\x8a\x95\x95\xf9\x57\xd2\xd6\x79\x89\xea\x83\x1f\x2c\x46\x09\x2b\x87\xbe\xc3\x0c\x59\xeb\xac\x2c\xd4\x4f\x28\xff\x48\x0a\x0a\x0a\x0d\x13\x4d\x6b\x62\x3b\x8b\x34\xc8\x63\x9e\x93\x5f\x42\xf5\x02\x16\x31\x26\xc4\xce\x1d\xe1\xc8\x14\x8d\xf4\xb1\x05\x8a\x09\x66\x18\xe6\xbb\x42\xa0\x8f\x95\xdd\x3d\x58\x07\x05\xb1\x50\x53\x0b\xeb\xb8\x7c\x0a\xb2\xe8\xd0\x19\xee\xcc\x66\x73\x79\x6c\xbb\x1a\xb0\x4e\x84\xee\x30\x6f\x81\xe2\x7a\xe6\xfd\x47\xa8\xed\xa1\x32\x4a\xb2\xed\x58\xc4\x13\x97\xe1\x68\xb0\xff\xd7\x4c\x0c\xf3\xfb\x3d\xb4\x7b\x4f\x32\xb0\xe7\x71\x81\x79\xe7\xff\x7b\xfb\x4e\x2c\x3a\x8f\xd6\x86\xe5\xb7\xc8\x4e\x6a\x0a\xb4\x7c\x94\x3d\x2d\x87\x4f\x3d\x87\x4b\x82\x75\xf6\x79\x73\xce\x9f\x66\xce\xa7\x67\xee\x0e\xc0\x0d\xec\x69\x32\x69\x48\x77\x73\xfb\x1e\xe1\x64\xd4\x18\x06\xfc\x14\x58\xf4\x23\xdf\x2e\x1d\xe6\x94\x0a\xdb\x08\x76\xba\x9c\x37\xe3\xf4\x4b\xf7\xc9\xc9\x7f\xdb\x3a\x32\xf7\x1c\xae\x36\xc1\x27\xb1\xcc\x08\x1f\x62\xde\x3f\xba\x4f\xb8\x6e\x77\x3a\x28\x75\x7e\xb7\x92\xdb\x7e\x0e\x06\x24\xef\xee\xbc\xa2\xf9\x2d\xcc\x03\x76\x5c\x85\x27\x4a\xc6\x13\x4f\x5f\x6a\xdc\xa6\x14\xab\x68\xd9\x97\xb4\x57\x05\x46\x05\x8e\x2d\xb7\x57\x60\x05\xb6\xfe\x42\x64\xba\x79\xdf\x93\x16\xc5\x01\x5a\xdc\x6a\x3a\x22\x9e\x08\xe9\x27\x34\x67\xdf\x06\xdf\x0f\xed\x2e\x28\xeb\x14\x6e\x14\xab\xb1\xda\xf6\xe6\x80\xad\x49\x2b\x5e\xf2\x6d\x53\xb9\x4f\x4d\xbb\x27\x10\xb1\xd5\xbb\x62\xd7\x01\x1f\x1e\x9f\x42\xfc\x3f\xa4\x84\xa9\xff\x79\x04\xb0\xbc\x20\x04\x1e\x25\x83\x6c\xcd\x33\x0a\x61\xb9\x5d\x22\xc5\x04\x98\x60\xdb\x55\x86\xb8\x3e\x8a\xa0\xd8\xd9\xaf\xca\x56\xe8\xee\xf1\xb4\x3c\xd0\xdc\x00\x69\x75\x52\x9c\x20\x59\xf8\x8b\x08\x34\xee\xb3\xc2\x32\xed\xfe\xeb\xe1\xef\x00\x00\x00\xff\xff\xce\x73\xf2\x29\x82\x18\x00\x00")

func assets_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_assets_index_html,
		"assets/index.html",
	)
}

func assets_index_html() (*asset, error) {
	bytes, err := assets_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/index.html", size: 6274, mode: os.FileMode(436), modTime: time.Unix(1425947181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assets_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{assets_index_html, map[string]*_bintree_t{}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
